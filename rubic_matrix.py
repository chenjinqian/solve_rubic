#!/usr/bin/python
# -*- coding: utf-8 -*-


# matrix represent  rubic state and try to solve the best path .


import math
import numpy  as np
import scipy as sp


BASE = [
       [1,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,1,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,1,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,1,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,1,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,1,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,1,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,1,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,1,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,1,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,1,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,1,    0,0,0,0,0,0,0,0,],

       [0,0,0,0,0,0,0,0,0,0,0,0,    1,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,1,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,1,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,1,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,1,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,1,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,1,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,1,],
]


# up reverse basic-representation
Urb = [
       [0,1,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,1,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,1,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [1,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,1,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,1,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,1,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,1,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,1,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,1,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,1,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,1,    0,0,0,0,0,0,0,0,],

       [0,0,0,0,0,0,0,0,0,0,0,0,    0,1,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,1,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,1,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    1,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,1,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,1,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,1,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,1,],
]


def t(n):
    import cmath
    return 1 * cmath.exp(1j * ((2/3.0) * cmath.pi * n) )

t1 = t(1)
t2 = t(2)

m=-1
Rrb = [
       [1,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,1,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,1,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,m,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,1,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,1,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,1,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,m,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,1,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,1,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,1,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,1,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],

       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,t(1),0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,1,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,1,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,t(2),],
       [0,0,0,0,0,0,0,0,0,0,0,0,    t(2),0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,1,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,1,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,t(1),0,0,0,],
]


Zrb = [
       [0,1,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,1,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,1,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [1,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,1,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,1,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,1,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,1,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,1,0,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,1,0,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,1,    0,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,1,0,0,0,    0,0,0,0,0,0,0,0,],

       [0,0,0,0,0,0,0,0,0,0,0,0,    0,1,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,1,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,1,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    1,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,1,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,1,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,1,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,1,0,0,0,],
]



Yrb = [
       [ 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,    0,0,0,0,0,0,0,0,],
       [ 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,    0,0,0,0,0,0,0,0,],
       [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,    0,0,0,0,0,0,0,0,],
       [ 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0,    0,0,0,0,0,0,0,0,],

       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,t2,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    t1,0,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,t2,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,0,t1,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,t1,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,t2,0,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,t1,0,0,0,0,0,],
       [0,0,0,0,0,0,0,0,0,0,0,0,    0,0,0,0,0,0,t2,0,],
]


# a = np.arange(3*4*5).reshape(3,4,5)
# b = np.arange(2*5*3).reshape(2,5,3)
# ar = np.arange(3*4*5).reshape(5,4,3)
# c = np.dot(a, b)


# a = np.arange(3*4*5*6).reshape((3,4,5,6))
# b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))
# np.dot(a, b)[2,3,2,1,2,2]

# m1 = np.matrix('1,2; 3,4')
# e1 = np.matrix('1,0; 0,1')
# e2 = np.matrix('0,1; 1, 0')
# e3 = np.matrix('0, 1j; -1j, 0')

base = np.matrix(BASE)
Y = np.matrix(Yrb)
Yr = Y * Y * Y
Zr = np.matrix(Zrb)
Z = Zr * Zr * Zr
Xr = Z * Y * Zr
X = Xr * Xr * Xr

Ur = np.matrix(Urb)
U = Ur * Ur * Ur
Dr = Y * Y * Ur * Y * Y
D = Dr * Dr * Dr
Rr = np.matrix(Rrb)
R= Rr * Rr * Rr
Lr = Zr * Zr * R * Zr * Zr
L = Lr * Lr * Lr
Br = Zr * R * Z
B = Br * Br * Br
Fr = Zr * Zr * B * Zr * Zr
F = Fr * Fr * Fr

# these are not recomanded, as it will change the center orientation.
u = Z * D
ur = u*u*u
d = Zr * U
dr = d*d*d
r = X * L
rr = r*r*r
l = Xr * R
lr = l* l* l
f = Y * B
fr = f*f*f
b = Yr * F
br = b*b*b

# horizon, as z-ori middle layer rotation.
H = u * Ur
Hr = ur * U
# verticall, x-ori
V = f * Fr
Vr = fr * F
# slice,  x-ori
S = r * Rr
Sr = rr * R

s3 = R * u * R * U *R*U*R*u*r*u*r*R
mys3 = R * U * U * r * u * R *u * r
# too suppress too much zero after point
np.set_printoptions(suppress=True)
f22 = R*u*u*R*R*u*R*R*u*R*R*u*u*R



# colomn will be slot, row as element.
# Ur/Rr as CounterClock roatation.
# r or u as two portation rotation.


def form_divid(s):
    arr = []
    for i in s:
        arr.append(i)
    return arr

# never write R2 as R'2, since it can not recongnize this form yet.
def form_transform(arr):
    form = []
    arr.append('end')
    lenth = len(arr)
    for x, y in zip(arr[0:(lenth -1)], arr[1:]):
        if not (x == "'" or x=='2'):
            form.append(x) if  not (y == "'") else form.append(x+'r')
            form.append(x) if (y=='2') else 0
    return form


def ef(s):
    elements = form_transform(form_divid(s))
    mk = '*'
    fs = []
    for e in elements:
        if not (fs == []):
            fs = fs + mk + e
        else:
            fs = e
    try:
        matrix = eval(fs)
        return matrix
    except:
        return []


f2 = "R'HR'HR2H'R'H'R'H'R2H"
# f3  = 'RR'
# f4 = "USSUSSUSSUSS"
print(ef(f2 ).nonzero())
print(ef(f2 ))
# print(ef(f3).nonzero())
# print(ef(f4).nonzero())
# print(ef("R'").nonzero())
